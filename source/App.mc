using Toybox.Application;
using Toybox.Communications;
using Toybox.WatchUi;
using Toybox.Graphics;
using Toybox.System;
using Toybox.Lang;

class App extends Application.AppBase {
    var name = "";
    var price = "";
    var isLoading = false;
    var error = null;

    function initialize() {
        System.println("=== APP INITIALIZE ===");
        AppBase.initialize();
        makeRequest();
    }

    function onStart(state) {
        System.println("=== APP START ===");
    }

    function onStop(state) {
        System.println("=== APP STOP ===");
    }

    function getInitialView() {
        System.println("=== GET INITIAL VIEW ===");
        return [new ProBeautySpaceView(), new ProBeautySpaceDelegate()];
    }

    function makeRequest() {
        System.println("üîÑ MAKE REQUEST STARTED");
        isLoading = true;
        error = null;
        WatchUi.requestUpdate();

        var url = "https://api.npoint.io/eae3eb3e944cf7a94bc5";
        
        System.println("üì° URL: " + url);
        
        var options = {
            :method => Communications.HTTP_REQUEST_METHOD_GET,
            :responseType => Communications.HTTP_RESPONSE_CONTENT_TYPE_JSON
        };

        try {
            Communications.makeWebRequest(
                url,
                {},
                options,
                new Method(self, :handleResponse)
            );
            System.println("‚úÖ REQUEST SENT SUCCESSFULLY");
        } catch (e) {
            System.println("‚ùå EXCEPTION IN MAKE REQUEST: " + e.getErrorMessage());
            error = "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: " + e.getErrorMessage();
            isLoading = false;
            WatchUi.requestUpdate();
        }
    }

    function handleResponse(responseCode, data) {
        System.println("=== HANDLE RESPONSE ===");
        System.println("üì° RESPONSE CODE: " + responseCode);
        System.println("üì¶ DATA TYPE: " + data);
        System.println("üì¶ DATA: " + data);
        
        isLoading = false;
        
        if (responseCode == 200) {
            System.println("‚úÖ HTTP 200 - SUCCESS");
            if (data != null) {
                System.println("üîÑ PROCESSING DATA...");
                processData(data);
            } else {
                error = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
                System.println("‚ùå DATA IS NULL");
            }
        } else if (responseCode == 404) {
            error = "–û—à–∏–±–∫–∞ 404 - –ù–µ –Ω–∞–π–¥–µ–Ω–æ";
            System.println("‚ùå HTTP 404 - NOT FOUND");
        } else if (responseCode == 500) {
            error = "–û—à–∏–±–∫–∞ 500 - –°–µ—Ä–≤–µ—Ä";
            System.println("‚ùå HTTP 500 - SERVER ERROR");
        } else if (responseCode == -1000) {
            error = "–ù–µ—Ç —Å–µ—Ç–∏";
            System.println("‚ùå ERROR -1000: NO NETWORK");
        } else if (responseCode == -400) {
            error = "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞";
            System.println("‚ùå ERROR -400: BAD REQUEST");
        } else {
            error = "–û—à–∏–±–∫–∞: " + responseCode.toString();
            System.println("‚ùå UNKNOWN ERROR CODE: " + responseCode);
        }
        
        System.println("üîÑ UPDATING UI...");
        WatchUi.requestUpdate();
        System.println("=== END HANDLE RESPONSE ===");
    }

    function processData(data) {
        System.println("=== PROCESS DATA ===");
        try {
            System.println("üîß DATA CLASS: " + data);
            
            if (data instanceof Array) {
                System.println("üìã DATA IS ARRAY, SIZE: " + data.size());
                if (data.size() > 0) {
                    var item = data[0];
                    System.println("üìù FIRST ITEM: " + item);
                    
                    if (item instanceof Dictionary) {
                        name = item["name"] != null ? item["name"].toString() : "";
                        price = item["price"] != null ? item["price"].toString() : "";
                        error = null;
                        System.println("‚úÖ DATA PARSED SUCCESSFULLY");
                        System.println("üè∑Ô∏è NAME: " + name);
                        System.println("üí∞ PRICE: " + price);
                    } else {
                        error = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–º–µ–Ω—Ç–∞";
                        System.println("‚ùå ITEM IS NOT DICTIONARY");
                    }
                } else {
                    error = "–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤";
                    System.println("‚ùå ARRAY IS EMPTY");
                }
            } else if (data instanceof Dictionary) {
                System.println("üìã DATA IS DICTIONARY");
                
                if (data["name"] != null) {
                    name = data["name"] != null ? data["name"].toString() : "";
                    price = data["price"] != null ? data["price"].toString() : "";
                    System.println("‚úÖ YOUR API DATA PARSED");
                } else {
                    error = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö";
                    System.println("‚ùå INVALID DATA FORMAT");
                }
                
                error = null;
                System.println("üè∑Ô∏è NAME: " + name);
                System.println("üí∞ PRICE: " + price);
            } else {
                error = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö";
                System.println("‚ùå UNKNOWN DATA TYPE");
            }
        } catch (e) {
            error = "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö";
            System.println("üí• EXCEPTION IN PROCESS DATA: " + e.getErrorMessage());
        }
        System.println("=== END PROCESS DATA ===");
    }

    function getName() {
        return name;
    }

    function getPrice() {
        return price;
    }

    function getError() {
        return error;
    }

    function getIsLoading() {
        return isLoading;
    }
}

class ProBeautySpaceView extends WatchUi.View {
    function initialize() {
        System.println("=== VIEW INITIALIZE ===");
        View.initialize();
    }

    function onLayout(dc) {
        System.println("=== VIEW ON LAYOUT ===");
    }

    function onUpdate(dc) {
        System.println("=== VIEW ON UPDATE ===");
        
        var app = Application.getApp();
        System.println("üîÑ APP STATE - Loading: " + app.getIsLoading() + ", Error: " + app.getError() + ", Name: " + app.getName() + ", Price: " + app.getPrice());
        
        dc.setColor(Graphics.COLOR_BLACK, Graphics.COLOR_BLACK);
        dc.clear();
        
        var width = dc.getWidth();
        var height = dc.getHeight();
        
        System.println("üìè SCREEN SIZE: " + width + "x" + height);
        
        dc.setColor(Graphics.COLOR_WHITE, Graphics.COLOR_TRANSPARENT);

        if (app.getIsLoading()) {
            System.println("üîÑ SHOWING LOADING...");
            drawWatchFace(dc, width, height, "–ó–∞–≥—Ä—É–∑–∫–∞...", "");
        } else if (app.getError() != null) {
            System.println("‚ùå SHOWING ERROR: " + app.getError());
            drawWatchFace(dc, width, height, "–û—à–∏–±–∫–∞", app.getError());
        } else {
            System.println("‚úÖ SHOWING DATA");
            drawWatchFace(dc, width, height, app.getName(), app.getPrice());
        }
        
        System.println("=== END VIEW UPDATE ===");
    }
    
    function drawWatchFace(dc, width, height, nameText, priceText) {
        System.println("üé® DRAWING WATCH FACE - Name: '" + nameText + "', Price: '" + priceText + "'");
        
        var centerX = width / 2;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        var clockTime = System.getClockTime();
        var timeString = Lang.format("$1$:$2$", [clockTime.hour, clockTime.min.format("%02d")]);
        System.println("‚è∞ TIME: " + timeString);
        
        // –í–´–ß–ò–°–õ–Ø–ï–ú –í–´–°–û–¢–´ –®–†–ò–§–¢–û–í
        var nameFont = findFittingFont(dc, nameText, width * 0.9, [Graphics.FONT_MEDIUM, Graphics.FONT_SMALL, Graphics.FONT_XTINY]);
        var nameHeight = dc.getFontHeight(nameFont);
        
        var timeFont = Graphics.FONT_NUMBER_THAI_HOT;
        var timeHeight = dc.getFontHeight(timeFont);
        
        var priceFont = findFittingFont(dc, priceText, width * 0.9, [Graphics.FONT_MEDIUM, Graphics.FONT_SMALL, Graphics.FONT_XTINY]);
        var priceHeight = dc.getFontHeight(priceFont);
        
        System.println("üìè FONT HEIGHTS - Name: " + nameHeight + ", Time: " + timeHeight + ", Price: " + priceHeight);
        
        // –ù–ê–ó–í–ê–ù–ò–ï - 5% –æ—Ç –≤–µ—Ä—Ö–∞ - –≤—ã—Å–æ—Ç–∞_—à—Ä–∏—Ñ—Ç–∞ / 2
        var nameTopPosition = (height * 0.05).toNumber();
        var nameY = nameTopPosition - (nameHeight / 2);
        System.println("üìõ NAME - 5% position: " + nameTopPosition + ", Final Y: " + nameY);
        dc.drawText(centerX, nameY, nameFont, nameText, Graphics.TEXT_JUSTIFY_CENTER);
        
        // –í–†–ï–ú–Ø - 50% –æ—Ç –≤–µ—Ä—Ö–∞ - –≤—ã—Å–æ—Ç–∞_—à—Ä–∏—Ñ—Ç–∞ / 2
        var timeTopPosition = (height * 0.5).toNumber();
        var timeY = timeTopPosition - (timeHeight / 2);
        System.println("‚è∞ TIME - 50% position: " + timeTopPosition + ", Final Y: " + timeY);
        dc.drawText(centerX, timeY, timeFont, timeString, Graphics.TEXT_JUSTIFY_CENTER);
        
        // –¶–ï–ù–ê - 95% –æ—Ç –≤–µ—Ä—Ö–∞ - –≤—ã—Å–æ—Ç–∞_—à—Ä–∏—Ñ—Ç–∞ / 2
        var priceTopPosition = (height * 0.95).toNumber();
        var priceY = priceTopPosition - (priceHeight / 2);
        System.println("üí∞ PRICE - 95% position: " + priceTopPosition + ", Final Y: " + priceY);
        dc.drawText(centerX, priceY, priceFont, priceText, Graphics.TEXT_JUSTIFY_CENTER);
        
        System.println("üé® WATCH FACE DRAWN");
    }
    
    function findFittingFont(dc, text, maxWidth, fonts) {
        if (text == null || text.length() == 0) {
            return fonts[0];
        }
        
        System.println("üîç FINDING FONT FOR: '" + text + "' (max width: " + maxWidth + ")");
        
        for (var i = 0; i < fonts.size(); i++) {
            var font = fonts[i];
            var textWidth = dc.getTextWidthInPixels(text, font);
            System.println("üìè FONT " + font + " WIDTH: " + textWidth);
            
            if (textWidth <= maxWidth) {
                System.println("‚úÖ FOUND FITTING FONT: " + font);
                return font;
            }
        }
        
        System.println("‚ö†Ô∏è NO FITTING FONT, USING SMALLEST: " + fonts[fonts.size() - 1]);
        return fonts[fonts.size() - 1];
    }
}

class ProBeautySpaceDelegate extends WatchUi.BehaviorDelegate {
    function initialize() {
        System.println("=== DELEGATE INITIALIZE ===");
        BehaviorDelegate.initialize();
    }

    function onSelect() {
        System.println("üéØ SELECT BUTTON PRESSED");
        var app = Application.getApp();
        app.makeRequest();
        return true;
    }

    function onBack() {
        System.println("üéØ BACK BUTTON PRESSED");
        WatchUi.popView(WatchUi.SLIDE_IMMEDIATE);
        return true;
    }
}